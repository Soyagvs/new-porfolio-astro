---
import "../styles/global.css";
import { ViewTransitions } from "astro:transitions";

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = "Agustin Martinez: Personal Site",
	description = "The personal site of Agustin Martinez",
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<meta name="author" content="Agustin Martinez" />
<meta name="description" content={description} />
<meta name="robots" content="index, follow" />
<meta name="theme-color" content="light dark" />
<meta name="theme-color" content="#7611a6" />
<meta name="generator" content={Astro.generator} />

<!--Open Graph (Facebook, LinkedIn)-->
<meta property="og:title" content={title} />
<meta property="og:type" content="Website" />
<meta
	property="og:image"
	content="https://soyagvs.vercel.app/screen.jpg"
/>
<meta name="description" property="og:description" content={description} />
<meta property="og:url" content="https://soyagvs.vercel.app" />

<!--Twitter Card (Twitter)-->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta
	name="twitter:image"
	content="https://soyagvs.vercel.app/screen.jpg"
/>

<meta property="og:url" content="https://soyagvs.vercel.app" />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.png" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>
<ViewTransitions />
<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (
			typeof localStorage !== "undefined" &&
			localStorage.getItem("theme")
		) {
			return localStorage.getItem("theme");
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};
	const isDark = getThemePreference() === "dark";
	document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

	if (typeof localStorage !== "undefined") {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark =
				document.documentElement.classList.contains("theme-dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});
	}
</script>
